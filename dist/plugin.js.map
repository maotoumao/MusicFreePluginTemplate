{"mappings":"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","sources":["src/index.ts","src/utils/formatter.ts","src/methods/search.ts","src/methods/getArtistWorks.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport cheerio from \"cheerio\";\r\nimport cryptojs from \"crypto-js\";\r\nimport dayjs from \"dayjs\";\r\nimport bigInt from \"big-integer\";\r\nimport he from \"he\";\r\nimport qs from \"qs\";\r\nimport { formatMusicItem, paidMusicFilter } from \"./utils/formatter\";\r\nimport search from \"./methods/search\";\r\nimport getArtistWorks from \"./methods/getArtistWorks\";\r\n\r\n/**\r\n * 你可以直接在此文件中写逻辑，也可以拆到其他文件中导入\r\n */\r\n\r\n/** 获取专辑详情 */\r\nasync function getAlbumInfo(albumItem: IAlbum.IAlbumItem, page: number = 1) {\r\n  const res = await axios.get(\r\n    \"https://www.ximalaya.com/revision/album/v1/getTracksList\",\r\n    {\r\n      params: {\r\n        albumId: albumItem.id,\r\n        pageNum: page,\r\n        pageSize: 50,\r\n      },\r\n    }\r\n  );\r\n  return {\r\n    isEnd: page * 50 >= res.data.data.trackTotalCount,\r\n    albumItem: {\r\n      worksNum: res.data.data.trackTotalCount,\r\n    },\r\n    musicList: res.data.data.tracks.filter(paidMusicFilter).map((_) => {\r\n      const r = formatMusicItem(_);\r\n      r.artwork = albumItem.artwork;\r\n      r.artist = albumItem.artist;\r\n      return r;\r\n    }),\r\n  };\r\n}\r\n\r\n/** 获取音乐源 */\r\nasync function getMediaSource(\r\n  musicItem: IMusic.IMusicItem,\r\n  quality: IMusic.IQualityKey\r\n) {\r\n  if (quality !== \"standard\") {\r\n    return;\r\n  }\r\n\r\n  const data = await axios.get(\r\n    \"https://www.ximalaya.com/revision/play/v1/audio\",\r\n    {\r\n      params: {\r\n        id: musicItem.id,\r\n        ptype: 1,\r\n      },\r\n      headers: {\r\n        referer: `https://www.ximalaya.com/sound/${musicItem.id}`,\r\n        accept: \"*/*\",\r\n        \"accept-encoding\": \"gzip, deflate, br\",\r\n        \"user-agent\":\r\n          \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.61\",\r\n      },\r\n    }\r\n  );\r\n  return {\r\n    url: data.data.data.src,\r\n  };\r\n}\r\n\r\nconst pluginInstance: IPlugin.IPluginDefine = {\r\n  platform: \"XMLY\",\r\n  version: \"0.0.0\",\r\n  supportedSearchType: [\"music\", \"album\", \"artist\"],\r\n  search, // 搜索\r\n  getMediaSource, // 获取音乐源\r\n  getAlbumInfo, // 获取专辑详情\r\n  getArtistWorks // 获取作者信息\r\n};\r\n\r\nexport default pluginInstance;\r\n","import dayjs from \"dayjs\";\r\n\r\n/** 将接口返回的音乐格式化为符合MusicFree协议的音乐 */\r\nexport function formatMusicItem(_) {\r\n  return {\r\n    id: _.id ?? _.trackId,\r\n    artist: _.nickname,\r\n    title: _.title,\r\n    album: _.albumTitle,\r\n    duration: _.duration,\r\n    artwork: _.coverPath?.startsWith(\"//\")\r\n      ? `https:${_.coverPath}`\r\n      : _.coverPath,\r\n  } as IMusic.IMusicItem;\r\n}\r\n\r\n/** 将接口返回的专辑格式化为符合MusicFree协议的专辑 */\r\nexport function formatAlbumItem(_) {\r\n  return {\r\n    id: _.albumId ?? _.id,\r\n    artist: _.nickname,\r\n    title: _.title,\r\n    artwork: _.coverPath?.startsWith(\"//\")\r\n      ? `https:${_.coverPath}`\r\n      : _.coverPath,\r\n    description: _.intro ?? _.description,\r\n    date: _.updatedAt ? dayjs(_.updatedAt).format(\"YYYY-MM-DD\") : null,\r\n  } as unknown as IAlbum.IAlbumItem;\r\n}\r\n\r\n/** 将接口返回的作者格式化为符合MusicFree协议的作者 */\r\nexport function formatArtistItem(_) {\r\n  return {\r\n    name: _.nickname,\r\n    id: _.uid,\r\n    fans: _.followersCount,\r\n    description: _.description,\r\n    avatar: _.logoPic,\r\n    worksNum: _.tracksCount,\r\n  } as IArtist.IArtistItem;\r\n}\r\n\r\n/** 过滤收费的专辑 */\r\nexport function paidAlbumFilter(raw) {\r\n  return !raw.priceTypes?.length;\r\n}\r\n\r\n/** 过滤收费的歌曲 */\r\nexport function paidMusicFilter(raw) {\r\n  return raw.tag === 0 || raw.isPaid === false || parseFloat(raw.price) === 0;\r\n}","/** 搜索方法 */\r\n\r\nimport axios from \"axios\";\r\nimport {\r\n  paidMusicFilter,\r\n  formatMusicItem,\r\n  paidAlbumFilter,\r\n  formatAlbumItem,\r\n  formatArtistItem,\r\n} from \"../utils/formatter\";\r\n\r\nasync function searchBase(query: string, page: number, core: string) {\r\n  return (\r\n    await axios.get(\"https://www.ximalaya.com/revision/search/main\", {\r\n      params: {\r\n        kw: query,\r\n        page: page,\r\n        spellchecker: true,\r\n        condition: \"relation\",\r\n        rows: 20,\r\n        device: \"iPhone\",\r\n        core,\r\n        paidFilter: true,\r\n      },\r\n    })\r\n  ).data;\r\n}\r\n\r\nasync function searchMusic(query: string, page: number) {\r\n  const res = (await searchBase(query, page, \"track\")).data.track;\r\n  return {\r\n    isEnd: page >= res.totalPage,\r\n    data: res.docs.filter(paidMusicFilter).map(formatMusicItem),\r\n  };\r\n}\r\n\r\nasync function searchAlbum(query: string, page: number) {\r\n  const res = (await searchBase(query, page, \"album\")).data.album;\r\n  return {\r\n    isEnd: page >= res.totalPage,\r\n    data: res.docs.filter(paidAlbumFilter).map(formatAlbumItem),\r\n  };\r\n}\r\n\r\nasync function searchArtist(query: string, page: number) {\r\n  const res = (await searchBase(query, page, \"user\")).data.user;\r\n  return {\r\n    isEnd: page >= res.totalPage,\r\n    data: res.docs.map(formatArtistItem),\r\n  };\r\n}\r\n\r\n/** 搜索函数 */\r\nexport default async function (query: string, page: number, type: IMedia.SupportMediaType) {\r\n  if (type === \"music\") {\r\n    return searchMusic(query, page);\r\n  } else if (type === \"album\") {\r\n    return searchAlbum(query, page);\r\n  } else if (type === \"artist\") {\r\n    return searchArtist(query, page);\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport { paidMusicFilter, formatMusicItem, paidAlbumFilter, formatAlbumItem } from \"../utils/formatter\";\r\n\r\n/** 获取作者的所有作品 */\r\nexport default async function getArtistWorks(artistItem: IArtist.IArtistItem, page: number, type: IArtist.ArtistMediaType) {\r\n    if (type === \"music\") {\r\n      const res = (\r\n        await axios.get(\"https://www.ximalaya.com/revision/user/track\", {\r\n          params: {\r\n            page,\r\n            pageSize: 30,\r\n            uid: artistItem.id,\r\n          },\r\n        })\r\n      ).data.data;\r\n      return {\r\n        isEnd: res.page * res.pageSize >= res.totalCount,\r\n        data: res.trackList.filter(paidMusicFilter).map((_) => ({\r\n          ...formatMusicItem(_),\r\n          artist: artistItem.name,\r\n        })),\r\n      };\r\n    } else {\r\n      const res = (\r\n        await axios.get(\"https://www.ximalaya.com/revision/user/pub\", {\r\n          params: {\r\n            page,\r\n            pageSize: 30,\r\n            uid: artistItem.id,\r\n          },\r\n        })\r\n      ).data.data;\r\n      return {\r\n        isEnd: res.page * res.pageSize >= res.totalCount,\r\n        data: res.albumList.filter(paidAlbumFilter).map((_) => ({\r\n          ...formatAlbumItem(_),\r\n          artist: artistItem.name,\r\n        })),\r\n      };\r\n    }\r\n  }\r\n  "],"names":[],"version":3,"file":"plugin.js.map"}